so ~/.vim/config/functions.vim

"====================================
" PLUGINS
"====================================

so ~/.vim/config/plugin-init.vim
so ~/.vim/config/plugins.vim
so ~/.vim/config/plugins-programming.vim

Plugin 'vim-scripts/a.vim'
" better cpp highlighting
Plugin 'octol/vim-cpp-enhanced-highlight'

" YouCompleteMe for better GOTO functionality
Plugin 'Valloric/YouCompleteMe'
" cscope
" Plugin 'brookhong/cscope.vim'

" use YCMs GoTo functionality
nnoremap gd :YcmCompleter GoTo<cr>
nnoremap gi :YcmCompleter GoToDefinition<cr>
nnoremap gh :YcmCompleter GoToDeclaration<cr>
nnoremap gt :YcmCompleter GetType<cr>
" preview the documentation
nnoremap pd :YcmCompleter GetDoc<cr>
" find all references and populate the quichfix list (works with javascript,
" python, typescript)
" nnoremap <leader>rr :YcmCompleter GoToReferences<cr>
" do not ask to load YCM configuration
let g:ycm_confirm_extra_conf = 0
" show errors/warnings
let g:ycm_show_diagnostics_ui = 1
" show errors and warnings
let g:ycm_enable_diagnostic_signs = 0
" min number of chars to start completion
let g:ycm_min_num_of_chars_for_completion = 0
" number of characters that must match for completion
let g:ycm_min_num_identifier_candidate_chars = 0
" trigger autocompletion as you type
let g:ycm_auto_trigger = 0
" show autocomplete in comments
let g:ycm_complete_in_comments = 1
" show autocomplete in strings
let g:ycm_complete_in_strings = 1
" do not use the preview window
let g:ycm_add_preview_to_completeopt = 0
" automatically close the upper window after completion
let g:ycm_autoclose_preview_window_after_completion = 1
" max file size for completion (50KB)
let g:ycm_disable_for_files_larger_than_kb = 10000

" plugin that generates the compile settings for YCM
Plugin 'rdnetto/YCM-Generator'


so ~/.vim/config/plugin-end.vim

so ~/.vim/config/config.vim

" load cscope if it exists
if executable("cscope") == 1
    echo "using cscope instead of ctags ..."
    " make tag act like cstag
    set cscopetag
    nnoremap <buffer> <leader>cs :cscope find s  <c-r>=expand('<cword>')<cr><cr>
    nnoremap <buffer> <leader>cg :cscope find g  <c-r>=expand('<cword>')<cr><cr>
    nnoremap <buffer> <leader>cc :cscope find c  <c-r>=expand('<cword>')<cr><cr>
    nnoremap <buffer> <leader>ct :cscope find t  <c-r>=expand('<cword>')<cr><cr>
    nnoremap <buffer> <leader>ce :cscope find e  <c-r>=expand('<cword>')<cr><cr>
    nnoremap <buffer> <leader>cf :cscope find f  <c-r>=expand('<cfile>')<cr><cr>
    nnoremap <buffer> <leader>ci :cscope find i ^<c-r>=expand('<cfile>')<cr>$<cr>
    nnoremap <buffer> <leader>cd :cscope find d  <c-r>=expand('<cword>')<cr><cr>
    command! -bar MakeCscope !cscope -bqR
    command! LoadCscope cs add cscope.out
    command! MakeTags MakeCscope | MakeCTags | LoadCscope

    if filereadable("cscope.out")
        echo "loading cscope tags ..."
        :silent LoadCscope
    endif
endif
" set the build program (assumes the project has a file called build.sh)
set makeprg=build.sh

nnoremap <F4> :make!<cr>

"=====================================
" JUMPING BETWEEN HEADER AND SOURCE
"=====================================

autocmd BufLeave *.{c,cpp,hpp} mark C
autocmd BufLeave *.h       mark H
